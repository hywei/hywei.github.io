---
layout: post
title: "迟来的2017年终总结"
date: 2018-02-22 00:00:00
categories:
---

> *前段时间懒癌发作，拖到现在才写...*


17年最重要的一件事自然是**结婚**，缘分真是一件很奇妙的东西，许多冥冥之中的事情注定发生。某天细想了一下，周围所熟识的人中，无论是同事还是许久未见的朋友，妹纸是所有人中三观和我最相似的。感谢这份奇妙的缘分，也感谢妹纸这几年的陪伴和包容！

工作上，我们的游戏17年经历了大大小小十几次的测试，每次测试的时候总会暴露一系列问题，除了玩法上一些不成熟，总是在变的设计之外，很多问题也是由于程序本身的经验不足，水平不够导致的，只能在这些血泪教训中不断成长。但相比一开始的手忙脚乱，现在已经可以做到相对平稳的迭代发布。

4月-6月这段时间主要在升级整个破坏系统，先是研究了许多3A大作中破坏效果的实现方式，然后调研整个破坏的制作pipeline，在引擎中实现了第一个版本的多级破坏效果。简单总结来说，利用现有的一些中间件（apex destruction，rayfire）配合高质量的特效，实现一些酷炫的破坏效果并不复杂。但真正运用到游戏中，变成真正落地的玩法的确是非常困难重重，目前遇到的挑战就有：
* 破坏数据制作：虽然现有的一些中间件可以对模型进行自定义切割，但这对3D模型美术以及TA的要求会比较高，国内这方面的人才并不多；
* 对Gameplay的影响：破坏触发后对寻路，AI，视野，Occlusion等游戏的很多方面都会有影响，实现的复杂度几乎翻倍；
* 性能：破坏数据对Render和Physics的性能影响巨大，需要一开始就要从架构上设计好完善的解决方案;

现在引擎的破坏系统基本可以支持当前游戏需要的各种玩法，但距离我心目中的完整状态还差缺不少，只能后面的日子里再继续迭代优化。

11月和12月基本上是在实现新的运维系统，包含完整的版本发布，部署，生产环境的快速设置以及完善的监控系统，整套系统基本已经完成（主要是靠网易SA大大的帮助），后面的海外测试也是在此基础上进行的。对我个人而言，这几个月作为专业"SA"，还是学到了非常多的运维知识。虽然之前在Linux也折腾过很多东西，但业余和专业之间还是有很大的差别，许多之前不求甚解的知识都需要花时间好好理清楚。不过，虽然这套运维系统可以满足目前的需求，但随着服务器开始一步步迁移到微服务架构，它已经有一些不太适合了，基于Docker的容器应该会是18年进行研究的重点。

除了这些Feature之外，17年很多细碎的工作量花在了优化方面，我所做的主要是践行Data-Orientation的设计思想，把很多系统逐渐重构为cache-friendly的数据组织方式。另外引擎中最重要的一个进展是同事开发的MultiThread Task库开始大规模应用在各个系统中，CPU的利用率有了显著提升。


